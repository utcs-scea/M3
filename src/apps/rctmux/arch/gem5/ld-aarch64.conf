OUTPUT_FORMAT("elf64-littleaarch64")

ENTRY(_start)

PHDRS
{
    text    PT_LOAD;
    data    PT_LOAD;
    flags   PT_LOAD;
    vectors PT_LOAD AT(0x0) FLAGS(0x7);
}

SECTIONS
{
    .vectors :
    {
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_4 - (16 * 4 * 0) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_1 - (16 * 4 * 1) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_4 - (16 * 4 * 2) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_4 - (16 * 4 * 3) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_4 - (16 * 4 * 0) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_4 - (16 * 4 * 1) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_4 - (16 * 4 * 2) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_4 - (16 * 4 * 3) >> 2)<< 5));
        . = ALIGN(128);
        /* generate vector table */
        LONG(0x5400000D | ((entry_0 - (16 * 4 * 0) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_1 - (16 * 4 * 1) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_2 - (16 * 4 * 2) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_3 - (16 * 4 * 3) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_4 - (16 * 4 * 0) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_4 - (16 * 4 * 1) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_4 - (16 * 4 * 2) >> 2)<< 5));
        . = ALIGN(128);
        LONG(0x5400000D | ((entry_4 - (16 * 4 * 3) >> 2)<< 5));
    } : vectors = 0xD503201F

    . = 0x1000;

    .text :
    {
        *(.text*)
        *(.rodata*)
    } : text = 0xD503201F

    .data ALIGN(0x1000) :
    {
        *(.data*)
        *(.got.plt*)
        *(COMMON*)
        *(.bss*)
    } : data

    /* put the RCTMUX_FLAGS at a fixed address */
    .rctmux 0x5ff0 :
    {
        *(.rctmux*)
    } : flags

    /DISCARD/ : {
        *(.ARM.exidx.*)
    }
}
